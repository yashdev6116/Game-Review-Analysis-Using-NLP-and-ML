# -*- coding: utf-8 -*-
"""Game Review Analysis using NLP and LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19qs5AMjlVYndYli0_DR_FWmkqdHav128
"""

from google.colab import files
uploaded=files.upload()

import pandas as pd
data=pd.read_csv("output.csv")

data.head()

data=data[['content','is_positive']]

data.isnull().sum()

data=data.dropna()

data.isnull().sum()

data.head()

import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
import string

nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('punkt_tab')

stop_words = set(stopwords.words('english'))
lemmatizer = WordNetLemmatizer()


def preprocess_text(text):
    # Convert to lowercase
    text = str(text).lower()
    # Remove punctuation
    text = text.translate(str.maketrans('', '', string.punctuation))
    # Tokenize
    tokens = word_tokenize(text)
    # Remove stopwords
    tokens = [word for word in tokens if word not in stop_words]
    # Lemmatize tokens
    tokens = [lemmatizer.lemmatize(word) for word in tokens]
    # Join tokens back into a single string
    return ' '.join(tokens)

data['content'] = data['content'].apply(preprocess_text)

data.head()

import matplotlib.pyplot as plt
data['is_positive'].value_counts().plot(kind='bar', color=['red', 'blue'])
plt.title('Sentiment Distribution')
plt.xlabel('Sentiment')
plt.ylabel('Count')
plt.show()

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split

# Initialize TF-IDF Vectorizer
vectorizer = TfidfVectorizer(max_features=5000)

# Transform the 'processed_content' column
X = vectorizer.fit_transform(data['content']).toarray()

# Convert 'is_positive' to numerical labels
y = data['is_positive'].apply(lambda x: 1 if x == "Positive" else 0)

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

def predict_sentiment(sentence):
    # Preprocess the input sentence (similar to earlier preprocessing steps)
    processed_sentence = preprocess_text(sentence)
    # Transform the input to match the model's features
    vectorized_input = vectorizer.transform([processed_sentence]).toarray()
    # Predict sentiment
    prediction = model.predict(vectorized_input)
    return "Positive" if prediction[0] == 1 else "Negative"

# Test the function
test_sentence = input("Enter a sentence: ")
print("Sentiment:", predict_sentiment(test_sentence))